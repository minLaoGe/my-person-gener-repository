package ${package}.${moduleName}.controller;

import java.util.Arrays;
import java.util.Map;
import io.renren.common.utils.MsgResponse;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;





/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${controlerName}")
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class ${className}Controller {

    private final  ${className}Service ${classname}Service;

    /**
     * 列表
     */
    @PostMapping("/list")
//    @RequiresPermissions("${moduleName}:${pathName}:list")
    public MsgResponse list(@RequestBody ReqParam<${className}Entity> params){
        this.startPagePost(params);
        PageUtils page = ${classname}Service.queryPage(params);
        return getTablePostInfo(params,${classname}Service.queryPageByCondition(params));
    }


    /**
     * 信息
     */
    @GetMapping("/info/{${pk.attrname}}")
  //  @RequiresPermissions("${moduleName}:${pathName}:info")
    public MsgResponse info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
		${className}Entity ${classname} = ${classname}Service.getById(${pk.attrname});

        return MsgResponse.ok().put("${classname}", ${classname});
    }

    /**
     * 保存
     */
    @PostMapping("/save")
 //   @RequiresPermissions("${moduleName}:${pathName}:save")
    public MsgResponse save(@RequestBody ${className}Entity ${classname}){
		${classname}Service.save(${classname});

        return MsgResponse.ok();
    }

    /**
     * 修改
     */
    @PostMapping("/update")
 //   @RequiresPermissions("${moduleName}:${pathName}:update")
    public MsgResponse update(@RequestBody ${className}Entity ${classname}){
		${classname}Service.updateById(${classname});

        return MsgResponse.ok();
    }

    /**
     * 根据列表删除
     */
#*    @RequestMapping("/deleteByIds")
 //   @RequiresPermissions("${moduleName}:${pathName}:delete")
    public MsgResponse delete(@RequestBody ${pk.attrType}[] ${pk.attrname}s){
		${classname}Service.removeByIds(Arrays.asList(${pk.attrname}s));
        return MsgResponse.ok();
    }*#
    /**
     * 根据id删除
     */
    @GetMapping("/delete/{${pk.attrname}}")
 //   @RequiresPermissions("${moduleName}:${pathName}:delete")
    public MsgResponse delete(@PathVariable ${pk.attrType} ${pk.attrname}){
		${classname}Service.removeById(${pk.attrname});
        return MsgResponse.ok();
    }

}
